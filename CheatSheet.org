#+TITLE: Easily Making CheatSheets with Org-mode
#+SUBTITLE: ---Reference Sheet for ‚ÄúWhat I'm Currently Learning‚Äù---
# DATE: << Winter 2019 >> When we don't provide a date, one is provided for us.
# ‚îÄCheatSheet Configurations: Change the first two‚Äº‚îÄ
#+MACRO: URL https://github.com/alhassy/CheatSheet
#+MACRO: blurb Pretty cheat sheets, or ‚Äúreference cards‚Äù, obtainable from Org-mode files. See section [[#getting-started]] below to get started making your own cheat sheets!
#+MACRO: ShowURL @@latex:{\tiny\hspace{6em}\url{ {{{URL}}} } }@@
#+AUTHOR: [[http://www.cas.mcmaster.ca/~alhassm/][Musa Al-hassy]] {{{ShowURL}}}
#+EMAIL: alhassy@gmail.com
#+TODO: Todo | spacing begin end LaTeX
#+OPTIONS: d:nil
#+INCLUDE: CheatSheetSetup.org

* LaTeX Extra, Local, Setup :ignore:

# Can be obtained from: https://github.com/alhassy/MyUnicodeSymbols
#
#+LATEX_HEADER: \usepackage{/Users/musa/MyUnicodeSymbols/MyUnicodeSymbols}

# Removing the red box that appears in "minted" when using unicode.
# Src: https://tex.stackexchange.com/questions/343494/minted-red-box-around-greek-characters
#
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \AtBeginEnvironment{minted}{\dontdofcolorbox}
#+LATEX_HEADER: \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}}
#+LATEX_HEADER: \makeatother

#+LATEX_HEADER: \usepackage{newunicodechar}
#+LATEX_HEADER: \newunicodechar{ùëª}{\ensuremath{T}}
#+LATEX_HEADER: \newunicodechar{‚äï}{\ensuremath{\oplus}}
#+LATEX_HEADER: \newunicodechar{‚âà}{\ensuremath{\approx}}

* COMMENT ~\LaTeX~ commands ‚Ü¶ ~#+latex: \LaTeX~

  Execute the following block, with ~C-c C-c~ anywhere inside it,
  to hide all LaTeX specific items away so that, for example, the generated HTML
  does not show them.

  #+BEGIN_SRC emacs-lisp :results no
(defun my/replace-in-buffer (this that)
  "Replace every occurance of regexp ‚Äòthis‚Äô with ‚Äòthat‚Äô
   in the current buffer."
   (interactive)
   (save-excursion
    (beginning-of-buffer)
    (while (re-search-forward this nil t)
      (replace-match that)
    ))
)

;; Replace newline, any number of space, then room or vspace with a #+latex: beforehand.
(let (this that)
  (dolist (kp '( ( "^[ ]*\\\\room" . "#+latex: \\\\room")
		 ( "^[ ]*\\\\vspace" . "#+latex: \\\\vspace")
		 ))
	(setq this (car kp))
	(setq that (cdr kp))
	(my/replace-in-buffer this that)
   )
)
  #+END_SRC

  #+RESULTS:

* Hello, World!

+ Pretty PDF :: Enter ~M-x compile~ to produce a nice looking PDF of your reference sheet.
  - I've bound this command to ~C-c C-m~ in [[https://github.com/alhassy/emacs.d][my Emacs setup]] ;-)

    My Emacs configuration also documents how I utilise ‚Äòminted‚Äô
    to obtain colourful source code blocks.

+ Section Headers :: A usual Org header, say ~* my section~, results in the boxed headers
     used in this cheat sheet.

+ Parallel Environments :: The LaTeX matter here supports an org-enviornment
     named ~parallel~ for producing text side-by-side.

     The column break is automatic, but as
     this is sugar for a ~minipage~ containing a ~multicolum~ we can force a column
     separation with ~\columnbreak~: This command, in Org, necessities newlines between
     the items being separated.

#+latex: \vspace{1em}
To learn more, manipulating this source is the way to go!

#+latex: \vspace{1em}
Also, opening this file produces a ~README.md~ ;-)
Which can then be regenerated on-demand with ~f11~.

* CheatSheet Examples

Reference sheets created from this project include,
#+latex: \vspace{1em}

+ [[https://github.com/alhassy/ElispCheatSheet][ElispCheatSheet]] :: Quick reference to the core language of Emacs
     ---Editor MACroS.
     # (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

+ [[https://github.com/alhassy/islam][Islam]] :: Important figures in the faith.

+ [[https://github.com/alhassy/PrologCheatSheet][PrologCheatSheet]] :: Program where everything is a relation ---i.e., a database table.

+ [[https://github.com/alhassy/CatsCheatSheet][CatsCheatSheet]] ::
  Listing of common theorems in elementary category theory.

+ [[https://github.com/alhassy/LatticesCheatSheet][LatticesCheatSheet]] ::
  Reference sheet for definitions and results in Lattice Theory.

+ [[https://github.com/alhassy/OCamlCheatSheet][OCamlCheatSheet]] :: Basics of OCaml, ‚Äúthe best imperative language‚Äù.

+ [[https://github.com/alhassy/CoqCheatSheet][CoqCheatSheet]] ::
  Reference sheet for the Coq language.

+ [[https://github.com/alhassy/GojuRyuCheatSheet][GojuRyuCheatSheet]] :: A quick cheat sheet for common terms in Goju Ryu Karate
     ---the hard-soft style of karate.

#+begin_center
/If you use this org-setup to produce a neat cheat sheet, please let me know!/
#+end_center

* spacing COMMENT vfill :ignore:
  \vfill
* Why Learn & Relearn?

  /The world of ideas is not revealed to us in one stroke;/
  /we must both permanently and unceasingly recreate it in/
  /our consciousness./ ---Rene Thom

* spacing newpage                                                    :ignore:
  \newpage
* Getting Started
:PROPERTIES:
:CUSTOM_ID: getting-started
:END:

The steps to utilising this git project for your own cheat sheet may be:

0. Go to the repo where you want to make a cheat sheet.

1. Add this project as a submodule then copy its core to where you're working:
   #+BEGIN_SRC shell :tangle no
   git submodule add https://github.com/alhassy/CheatSheet.git
   ; cp CheatSheet/CheatSheet.org .
   ; cp CheatSheet/README.org .
   #+END_SRC

2. Open ~CheatSheet.org~ and locate ~#+INCLUDE: CheatSheetSetup.org~
   then rewrite ~CheatSheetSetup.org ‚Üí CheatSheet/CheatSheetSetup.org~.

# git submodule add https://github.com/alhassy/CheatSheet.git ; cp CheatSheet/CheatSheet.org . ; cp CheatSheet/README.org .

I don't think this is difficult to automate, so I will likely get
to doing it. Indeed, just copy-paste the following into, say the
~*scratch*~ buffer then ~C-x C-e~ after the final closing parenthesis.

#+BEGIN_SRC emacs-lisp :tangle no
(let ((your-repo "~/example") ;; Alter this location!
      (enable-local-variables :all))
      ;; Look at my ‚Äúlocal variables‚Äù below; ensure nothing malicious.
      ;; So no need to be queried about loading them.

 ;; Obtain the submodule then make a /copy/ of this cheatsheet.
 (eshell-command (concat
   "  cd " your-repo
   "; git submodule add https://github.com/alhassy/CheatSheet.git"
   "; cp CheatSheet/CheatSheet.org ."
  ))

 ;; Make your cheat sheet refer to the submodule's setup file.
 (find-file-other-window (concat your-repo "/CheatSheet.org"))
 (beginning-of-buffer)
 (re-search-forward "INCLUDE: CheatSheetSetup.org" nil t)
 (replace-match "INCLUDE: CheatSheet/CheatSheetSetup.org")
 (beginning-of-buffer)
)

;; To remove a submodule:
;; git submodule deinit ‚ü™path_to_submodule‚ü´ ; git rm ‚ü™path_to_submodule‚ü´
#+END_SRC
# Testing purposes:
# (async-shell-command "rm -rf ~/delme; mkdir delme; cd delme; git init")

For the ~README.md~ to be generated as desired, fill in the macros ~URL~ and ~blurb~
at the top of this org file to point to your repository and provide a description
of what the cheatsheet serves to accomplish.

* spacing COMMENT vfill :ignore:
  \vfill
* What if it's not good enough?

/‚ÄúThe person who thinks of doing something, is usually passed by the person doing it.‚Äù/

#+latex: \vspace{1em}

/The more that you read, the more things you will know./
/The more that you learn, the more places you'll go./
---Dr. Seuss

* spacing newpage                                                    :ignore:
  \newpage
* Org-mode Basics

Read [[https://orgmode.org/worg/org-tutorials/org4beginners.html][Org-mode for beginners]] for a refresher!
  - For more see [[https://orgmode.org/orgguide.pdf][The Compact Org-mode Guide]].

#+latex: \vspace{1em}

+ Reloading :: To reload a file with updated org settings, press
 ~C-c C-c~ on a settings line --i.e., one beginning with a ~#+~, to reset the
  temporary file cache.

+ Inclusion :: During export, you can include the content of another file.
  - Syntax: ~#+INCLUDE: "‚ü®fileName‚ü©" [‚ü®markup‚ü© [‚ü®language‚ü©]]~
    * ~markup ::= src | example~
    * ~language ::= C | haskell | emacs-lisp | ‚ãØ~
    * If the markup is not given, the text will be assumed to be in
      Org mode format and will be processed normally; c.f., [[https://orgmode.org/manual/In_002dbuffer-settings.html][Setup files]].

  - To visit the file, ~C-c '~ while the cursor is on the line with the file name.

  - Include only portions of a file by appending with ~:lines "x-y"~ where ~x~ is the first
    line and ~y~ is the second-to-last line. Also ~"-y"~ for upto but not including line ~y~,
    and ~"x-"~ for taking line ~x~ until the end of the file.
     # - Include portions of a file: https://orgmode.org/manual/Include-files.html

* Basic Equational Support

Basic name-formula equational support. ~\eqn{name}{formula}~
yields a displayed equation with ~formula~ left aligned and ~name~ right aligned:

\eqn{name}{formula}
#+BEGIN_EXPORT latex
\eqn{Functoriality}{
  F(f_0 \circ \cdots \circ f_{n-1}) \;=\; F\, f_0 \circ \cdots \circ F\, f_{n-1}
  }
#+END_EXPORT

#+latex: \room
Moreover, we can refer to such a formula by invoking ~\ref{name}~ --e.g., \ref{Functoriality} and \ref{name}.
However, if ~name~ involves unicode symbols, then this may cause problems.

#+latex: \room
See the [[https://github.com/alhassy/CatsCheatSheet][CatsCheatSheet]] for examples of this kind.

:MultipleEquationsExample:

preamble words here --below comes from CatsCheatSheet--

#+BEGIN_EXPORT latex
\begineqns

\eqn{$\langle\rangle$-Type}{f : C ‚Üí A \lands g : C ‚Üí B \impliesS ‚ü®f, g‚ü© : C ‚Üí A √ó B}

\eqn{$\langle\rangle$-Char}{ \fst ‚àò x = f \lands \snd ‚àò x = g \equivS x = ‚ü®f, g‚ü© }

\eqn{$\langle\rangle$-Cancellation; $\langle\rangle$-Self}{ \fst ‚àò ‚ü®f, g‚ü© = f \landS \snd ‚àò ‚ü®f, g‚ü© = g}

\eqn{$\langle\rangle$-Id}{ ‚ü®\fst, \snd‚ü© = \Id}

\eqn{$\langle\rangle$-Unique}{ \fst ‚àò x = \fst ‚àò y  \lands \snd ‚àò x = \snd ‚àò y \impliesS x = y}

\eqn{$\langle\rangle$-Fusion}{ ‚ü®f , g‚ü© ‚àò x = ‚ü®f ‚àò x , g ‚àò x‚ü© }

\eqn{$\langle\rangle$-Functor-Dist}{F \, ‚ü®f, g‚ü©_ùíû = ‚ü®F \, f , F \, g‚ü©_ùíü \qquad\text{ where } F : ùíû ‚Üí ùíü}

\endeqns
#+END_EXPORT

#+latex: \room
#+latex: \room

postamble words here

:End:

* What if I want 3 columns?

 At the top, say after the ~#+INCLUDE: CheatSheet/CheatSheetSetup.org~ line, add a new
 section:

#+BEGIN_EXAMPLE org :tangle no
,* begin multicols  :ignore:
,#+latex: \begin{multicols}{3}
#+END_EXAMPLE

 Then at the very bottom, add a section to close this multicol:

#+BEGIN_EXAMPLE org :tangle no
,* end multicols   :ignore:
,#+latex: \end{multicols}
#+END_EXAMPLE

Having three narrow columns is useful for term-heavy or formula heavy sheets.

* spacing newpage                                                    :ignore:
  \newpage
* Parallel Environment

Cheat sheets should not waste space, so the setup provides
a ~parallel~ LaTeX enviornment that takes an optional parameter
indicating how many columns are desired ---two by default.
Importantly, we use this environment as if it were any normal org-block:
#
#+begin_parallel org
#+BEGIN_EXAMPLE org :tangle no
,#
,#+begin_parallel org
???content here???
,#+end_parallel
#+END_EXAMPLE

The initial new line is important, otherwise the parallel environment
occurs in-line, which may not be the intended behaviour.
#+end_parallel

#+latex: \hrule \room
:No_long_supported:
#+BEGIN_SRC emacs-lisp :tangle no
;; for the <X-TAB short-cuts
(make-variable-buffer-local 'org-structure-template-alist)

(setq PARALLEL (concat "# \n#+begin_parallel latex \n?\n#+end_parallel"))
(add-to-list 'org-structure-template-alist `("p" ,PARALLEL))
#+END_SRC
:End:

Below we demonstrate that [[https://frama-c.com/][loops implement finite quantifications]]
by showing how the specification of a loop is implemented, unsurprisingly,
using a loop. [[https://github.com/alhassy/MyUnicodeSymbols][I tend to use a lot of unicode.]]

A finite quantification can be defined axiomatically
by the empty-range rule and split-off term rules.
Together these form a recursive definition which can be phrased as a loop.
#
#+begin_parallel org
#+BEGIN_SRC c
// For _‚äï_ : ùëª ‚Üí ùëª ‚Üí ùëª,
// fold(A,a,b) ‚âà (‚äï x : a..b-1 ‚Ä¢ A[x])
/*@ axiomatic Fold {
  @
  @ logic ùëª
  @   fold{L}(ùëª *A, ‚Ñ§ a, ‚Ñ§ b)
  @   reads a,b,A, A[..] ;
  @
  @ axiom foldEmptyRange{L} :
  @   ‚àÄ ùëª *A, ‚Ñ§ a, b; a ‚â• b
  @   =‚áí  fold(A,a,b) == identity(‚äï);
  @
  @ axiom foldSplitOffTerm{L} :
  @   ‚àÄ ùëª *A, ‚Ñ§ a, b; a ‚â§ b
  @   =‚áí      fold(A, a, b+1)
  @        == fold(A, a, b  ) ‚äï A[b];
  @ }
  @*/
#+END_SRC
\columnbreak
#+BEGIN_SRC c
/*@ requires \valid(A+(0..N-1));
  @ assigns \nothing;
  @ ensures \result == fold(A,0,N);
  @*/
ùëª fold(int N, ùëª* A) {

    ùëª total = identity(‚äï);

    /*@ loop invariant 0 <= n <= N;
      @ loop invariant total == fold(A,0,n);
      @ loop assigns n, total;
      @ loop variant N-n;
    */
    for(int n = 0; n != N; n++)
	total = total ‚äï A[n];
    return total;
}
#+END_SRC
#+end_parallel

#+latex: \vspace{-0.5em}

This pseudo-code is reified by giving concrete values
for ~(ùëª, ‚äï, identity)~ such as ~(int, +, 0)~ or ~(bool, ||, false)~.
Any [[https://en.wikipedia.org/wiki/Monoid][monoid]] will do.

#+latex: \room \hrule \room

~parallelNB~ produces a side-by-side rendition with ‚ÄòN‚Äôo ‚ÄòB‚Äôar:
#
#+begin_parallelNB org
left \newline left \newline left

\columnbreak
right \newline right \newline right
#+end_parallelNB

Here is an example with four columns:
#
#+ATTR_LATEX: :options [4]
#+begin_parallel org
left \newline left \newline left

\columnbreak
middle \newline middle \newline middle

\columnbreak
middle \newline middle \newline middle

\columnbreak
right \newline right \newline right
#+end_parallel

Here is an example with three columns and ‚Äòn‚Äôo ‚Äòb‚Äôar:
#
#+begin_parallel3NB org
left \newline left \newline left

\columnbreak
middle \newline middle \newline middle

\columnbreak
right \newline right \newline right
#+end_parallel3NB



\newpage

* spacing COMMENT newpage :ignore:
  \newpage
* COMMENT Helper Elisp ---unused homemade version control

#+BEGIN_QUOTE
This section provides a homemade version control interface
---preview with f7 then commit with f8--- which I no longer use.
Instead, I use magit and have bound f7, in my Emacs init file,
to produce PDFs by default.

To use these utilities, add to the ‚Äúfooter‚Äù below an eval for
(org-babel-load-file "CheatSheet/CheatSheet.org")
#+END_QUOTE

\hrule\room

The following utilities are loaded when this file is opened.
After the first time the file ~CheetSheet.el~ is created and this section
may be deleted. When you delete this section, ensure the ~load~ in the footer
below loads ~CheatSheet/CheatSheet.el~.

#+BEGIN_SRC emacs-lisp :tangle CheatSheet.el
;; preview
(defun my-org-latex-export-to-pdf ()
  "Produce a PDF from the CheatSheet then show it via the OS's PDF viewer."

  (interactive)
  (async-shell-command  (concat "open " (org-latex-export-to-pdf)))
)

(local-set-key (kbd "<f7>") 'my-org-latex-export-to-pdf)

;; commit
(local-set-key (kbd "<f8>") '(lambda () (interactive)
  (shell-command
     (format "git commit CheatSheet.org CheatSheet.pdf -m \"CheatSheet: %s\""
     (read-string "Commit Message for CheatSheet: ")))
))
#+END_SRC

* COMMENT Making README.md

C-c C-c: Evaluate src block.

:'( For some reason using {{{title}}} below would not work.

#+NAME: make-readme
#+BEGIN_SRC emacs-lisp
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.md
     ,#+HTML: <h1> Easily Making CheatSheets with Org-mode </h1>
     ,#+OPTIONS: toc:nil d:nil
     # Toc is displayed below at a strategic position.

     {{{blurb}}}

     :Hide:
     This project is to contain a listing of common results in X Theory.

     ,*The repo contains other articles I've written on X Theory;*
     ,*which may be read in a blog-format at:*
     https://alhassy.github.io/blog/categories/#Xtheory
     :End:

    ,*The listing sheet, as PDF, can be found
     [here]({{{URL}}}/blob/master/CheatSheet.pdf)*,
     while below is an unruly html rendition.

     This reference sheet is built around the system
     https://github.com/alhassy/CheatSheet.

     ,*The listing sheet, as PDF, can be found
     [here]({{{URL}}}/blob/master/CheatSheet.pdf)*,
     while below is an unruly html rendition.

     ,#+TOC: headlines 2
     ,#+INCLUDE: CheatSheet.org
    ")

    ;; No code execution on export
    ;; ‚ü™ For a particular block, we use ‚Äú:eval never-export‚Äù ‚ü´
    ;;
    (setq org-export-use-babel nil)

    (org-mode)
    (org-md-export-to-markdown)
)
#+END_SRC

#+RESULTS: make-readme
: README.md

#+RESULTS:
: README.md



* COMMENT footer

The first ‚Äúeval‚Äù below is convenience matter
that should be loaded whenever CheatSheet.org is opened.

The second ‚Äúeval‚Äù makes a README for the repo, whenever the file is opened,
and is then bound to ~f11~ for convenience.

# Local Variables:
# eval: (progn (visual-line-mode t) (require 'ox-extra) (ox-extras-activate '(ignore-headlines)))
# eval: (local-set-key (kbd "<f11>") '(lambda () (interactive) (org-babel-goto-named-src-block "make-readme") (org-babel-execute-src-block) (outline-hide-sublevels 1)))
# eval: (progn (visual-line-mode t) (require 'ox-extra) (ox-extras-activate '(ignore-headlines)))
# compile-command: (my-org-latex-export-to-pdf)
# End:
