:ImportantShortcuts: 
f7 preview changes
f8 commit each change
f9 push changes
:End:
* Header                                                      :do:not:ignore:
#+TITLE: Reference Sheet for ``What I'm Currently Learning''
# SUBTITLE: Cheat Sheet Template
# DATE: << Winter 2019 >>
# When we don't provide a date, one is provided for us.
#+MACRO: URL https://github.com/alhassy/CheatSheet
#+MACRO: ShowURL @@latex:{\tiny\hspace{6em}\url{ {{{URL}}} } }@@
#+AUTHOR: [[http://www.cas.mcmaster.ca/~alhassm/][Musa Al-hassy]] {{{ShowURL}}}
#+EMAIL: alhassy@gmail.com
#+DESCRIPTION: This document is written by Musa Al-hassy for his learning in the Winter of 2019.
#+STARTUP: hideblocks
#+STARTUP: overview
#+TODO: BEGIN-IGNORE(b) END-IGNORE(e) } | DONE(d)
#+OPTIONS: d:nil

#+INCLUDE: CheatSheetSetup.org
# ‚Äº‚Äº CHANGE ME, the include; see submodules section below ‚Äº‚Äº
# ‚Äº‚Äº Also change ‚ÄúURL‚Äù macro above to point to your repo.

* Hello, World!

+ Pretty PDF :: Enter ~M-x compile~ to produce a nice looking PDF of your reference sheet.
  - I've bound this command to ~C-c C-m~ in my Emacs setup ;-)

+ Section Headers :: A usual Org header, say ~* my section~, results in the boxed headers
     used in this cheat sheet.

+ Parallel Environments :: The sequence ~<p TAB~ produces a `parallel' environment for
     producing text side-by-side. The column break is automatic, but as 
     this is sugar for a ~minipage~ containing a ~multicolum~ we can force a column
     separation with ~\columnbreak~: This command, in Org, necessities newlines between
     the items being separated.

\vspace{1em}
To learn more, manipulating this source is the way to go!

\vspace{1em}
Also, opening this file produces a ~README.md~ ;-)

* CheatSheet Examples

Reference sheets created from this project include,
\vspace{1em}

+ [[https://github.com/alhassy/CatsCheatSheet][CatsCheatSheet]] :: 
  Listing of common theorems in elementary category theory.

+ [[https://github.com/alhassy/LatticesCheatSheet][LatticesCheatSheet]] :: 
  Reference sheet for definitions and results in Lattice Theory.

+ [[https://github.com/alhassy/CoqCheatSheet][CoqCheatSheet]] :: 
  Reference sheet for the Coq language.

\vspace{1em}
The steps to utilising this git project for your own cheat sheet may be:
0. Go to the repo you want to make a cheat sheet.
1. Add this project as a submodule then copy its core to where you're working:
   #+BEGIN_EXAMPLE shell
   git submodule add https://github.com/alhassy/CheatSheet.git
   ; cp CheatSheet/CheatSheet.org . 
   ; cp CheatSheet/README.org .   
   #+END_EXAMPLE
2. Open ~CheatSheet.org~ and locate ~#+INCLUDE: CheatSheetSetup.org~
   then rewrite ~CheatSheetSetup.org ‚Üí CheatSheet/CheatSheetSetup.org~.
3. Within the ~README.org~, if you're using it, alter the regions marked
   ~!!CHANGE ME!!~.

# git submodule add https://github.com/alhassy/CheatSheet.git ; cp CheatSheet/CheatSheet.org . ; cp CheatSheet/README.org .

I don't think this is difficult to automate, so I will likely get
to doing it.

* Basic Equational Support


Basic name-formula equational support. ~\eqn{name}{formula}~
yields a displayed equation with ~formula~ left aligned and ~name~ right aligned:
\eqn{name}{formula}
Moreover, we can refer to such a formula by invoking ~\ref{name}~ --e.g., \ref{name}. 
However, if ~name~ involves unicode symbols, then this may cause problems.

:MultipleEquationsExample:

preamble words here --below comes from CatsCheatSheet--

#+BEGIN_EXPORT latex
\begineqns

\eqn{$\langle\rangle$-Type}{f : C ‚Üí A \lands g : C ‚Üí B \impliesS ‚ü®f, g‚ü© : C ‚Üí A √ó B}

\eqn{$\langle\rangle$-Char}{ \fst ‚àò x = f \lands \snd ‚àò x = g \equivS x = ‚ü®f, g‚ü© }

\eqn{$\langle\rangle$-Cancellation; $\langle\rangle$-Self}{ \fst ‚àò ‚ü®f, g‚ü© = f \landS \snd ‚àò ‚ü®f, g‚ü© = g}

\eqn{$\langle\rangle$-Id}{ ‚ü®\fst, \snd‚ü© = \Id}

\eqn{$\langle\rangle$-Unique}{ \fst ‚àò x = \fst ‚àò y  \lands \snd ‚àò x = \snd ‚àò y \impliesS x = y}

\eqn{$\langle\rangle$-Fusion}{ ‚ü®f , g‚ü© ‚àò x = ‚ü®f ‚àò x , g ‚àò x‚ü© }

\eqn{$\langle\rangle$-Functor-Dist}{F \, ‚ü®f, g‚ü©_ùíû = ‚ü®F \, f , F \, g‚ü©_ùíü \qquad\text{ where } F : ùíû ‚Üí ùíü}

\endeqns
#+END_EXPORT

\room
\room

postamble words here

:End:

* newpage :ignore:
  \newpage
* Org-mode Basics

Read [[https://orgmode.org/worg/org-tutorials/org4beginners.html][Org-mode for beginners]] for a refresher!
  - For more see [[https://orgmode.org/orgguide.pdf][The Compact Org-mode Guide]].

\vspace{1em}

+ Reloading :: To reload a file with updated org settings, press
 ~C-c C-c~ on a settings line --i.e., one beginning with a ~#+~, to reset the 
  temporary file cache.

+ Inclusion :: During export, you can include the content of another file. 
  - Syntax: ~#+INCLUDE: "‚ü®fileName‚ü©" [‚ü®markup‚ü© [‚ü®language‚ü©]]~
    * ~markup ::= src | example~
    * ~language ::= C | haskell | emacs-lisp | ‚ãØ~ 
    * If the markup is not given, the text will be assumed to be in 
      Org mode format and will be processed normally; c.f., [[https://orgmode.org/manual/In_002dbuffer-settings.html][Setup files]].
  
  - To visit the file, ~C-c '~ while the cursor is on the line with the file name.

  - Include only portions of a file by appending with ~:lines "x-y"~ where ~x~ is the first
    line and ~y~ is the second-to-last line. Also ~"-y"~ for upto but not including line ~y~,
    and ~"x-"~ for taking line ~x~ until the end of the file.
     # - Include portions of a file: https://orgmode.org/manual/Include-files.html

* Emacs

# + C-u 20 RET :: repeat action RET 20 times, thereby inserting lots of new lines :-)
+ C-x r k    :: M-x kill-rectangle
+ C-l C-l    :: move buffer top to be current cursor location.
+ Delete a region of text, e.g., white space :: 
  ~C-SPC~ at the beginning of the first line
  then ~C-x r k~ (rectangular kill) at the end of the last line of the (indentation) region you want to remove.

* Git

+ Revert a file to a particular commit ::
  ~git checkout 0cdf -- myfiles~
     - Where ~0cdf~ is your commit identifier, which is usually much longer.

+ ~git whatchanged~ :: Like ~git log~ but informs exactly which files were altered.

* Grep

+ Find all files containing specific text :: \forcenewline
  `r'ecursively look for the `w'hole given pattern: \\
  ~grep -rw '/path/to/somewhere/' -e 'pattern'~

  # - Example: Look for a word starting at the root, ~grep -rw '/' -e 'lattice'~

+ Better :: ~ack 'text-to-find-here' locationToBeginLooking~
  - [[https://beyondgrep.com/][ack]] is like grep, but for source code.
  - It looks prettier and more informative. 	    

* Linux

+ The way to ``double-click'' on a file from the command line is =xdg-open=.

* newpage :ignore:
  \newpage
* CheatSheet Helper Elisp

The following utilities are loaded when this file is opened.
After the first time the file ~CheetSheet.el~ is created and this section
may be deleted. When you delete this section, ensure the ~load~ in the footer
below loads ~CheatSheet/CheatSheet.el~.

0. Make some changes, look at them with ~f7~.
1. Commit each change with ~f8~.
2. Push your changes with ~f9~.

\hrule

#+BEGIN_SRC emacs-lisp :tangle CheatSheet.el
(defun my-org-latex-export-to-pdf ()
  "Produce a PDF from the CheatSheet then show it via the evince PDF viewer."

  (interactive)
  (org-latex-export-to-pdf) 
  (eshell-command 
     (concat "evince " 
             (file-name-sans-extension buffer-file-name) ".pdf &"))
)

;; Preview and commit

(local-set-key (kbd "<f7>") 'my-org-latex-export-to-pdf)

(local-set-key (kbd "<f8>") '(lambda () (interactive) 
  (shell-command 
     (format "git commit CheatSheet.org CheatSheet.pdf -m \"CheatSheet: %s\""
     (read-string "Commit Message for CheatSheet: ")))
))

;; Stuff that should be loaded whenever CheatSheet.org is opened.

(visual-line-mode t)

(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))

;; for the <X-TAB short-cuts
(make-variable-buffer-local 'org-structure-template-alist)

(setq PARALLEL (concat "# \n#+begin_parallel latex \n?\n#+end_parallel"))
(add-to-list 'org-structure-template-alist `("p" ,PARALLEL))
#+END_SRC

# (setq TEMPLATE (concat "#+NAME: ?\n#+BEGIN_SRC c :tangle sheet_code.c\n?\n#+END_SRC"))
# (add-to-list 'org-structure-template-alist `("s" ,TEMPLATE))

* newpage :ignore:
  \newpage
* Example Use ~<p~: [[https://frama-c.com/][Loops implement finite quantifications]]

# Removing the red box that appears in ‚Äúminted‚Äù when using unicode.
# Src: https://tex.stackexchange.com/questions/343494/minted-red-box-around-greek-characters
#
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \AtBeginEnvironment{minted}{\dontdofcolorbox}
#+LATEX_HEADER: \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}}
#+LATEX_HEADER: \makeatother

#+LATEX_HEADER: \usepackage{newunicodechar}
#+LATEX_HEADER: \newunicodechar{ùëª}{\ensuremath{T}}
#+LATEX_HEADER: \newunicodechar{‚äï}{\ensuremath{\oplus}}
#+LATEX_HEADER: \newunicodechar{‚âà}{\ensuremath{\approx}}

A finite quantification can be defined axiomatically
by the empty-range rule and split-off term rules.
Together these form a recursive definition which can be phrased as a loop.
#
#+begin_parallel c

#+BEGIN_SRC c
// For -‚äï- : ùëª ‚Üí ùëª ‚Üí ùëª,
// fold(A,a,b) ‚âà (‚äï x : a..b-1 ‚Ä¢ A[x]) 
/*@ axiomatic Fold { 
  @   
  @ logic ùëª
  @   fold{L}(ùëª *A, integer a, integer b)
  @   reads a,b,A, A[..] ;
  @
  @ axiom foldEmptyRange{L} :
  @   \forall ùëª *A, integer a, b; a >= b
  @   ==>  fold(A,a,b) == identity(‚äï);
  @
  @ axiom foldSplitOffTerm{L} :
  @   \forall ùëª *A, integer a, b; a <= b
  @   ==>     fold(A, a, b+1) 
  @        == fold(A, a, b  ) ‚äï A[b];
  @ }
  @*/
#+END_SRC

\columnbreak

#+NAME: ?
#+BEGIN_SRC c
/*@ requires \valid(A+(0..N-1));
  @ assigns \nothing;
  @ ensures \result == fold(A,0,N);
  @*/
ùëª fold(int N, ùëª* A) {

    ùëª total = identity(‚äï);
    
    /*@ loop invariant 0 <= n <= N;
      @ loop invariant total == fold(A,0,n);
      @ loop assigns n, total;
      @ loop variant N-n;
    */
    for(int n = 0; n != N; n++)
        total = total ‚äï A[n];
    return total;
}
#+END_SRC
#+end_parallel

This pseudo-code is reified by giving concrete values
for ~(ùëª, ‚äï, identity)~ such as ~(int, +, 0)~ or ~(bool, ||, false)~.
Any [[https://en.wikipedia.org/wiki/Monoid][monoid]] will do.


\newpage

* COMMENT Making README.md

C-c C-c: Evaluate src block.

#+NAME: make-readme
#+BEGIN_SRC emacs-lisp :results none
(with-temp-buffer
    (insert 
    "#+EXPORT_FILE_NAME: README.md
     #+HTML: <h1> CheatSheet </h1>
     #+OPTIONS: toc:nil
     # Toc is displayed below at a strategic position.

     Pretty cheat sheets, or ‚Äúreference cards‚Äù, obtainable from Org-mode files.

     ## This project is to contain a listing of common results in X Theory.
     ##
     ## *The repo contains other articles I've written on X Theory;*
     ## *which may be read in a blog-format at:*
     ## https://alhassy.github.io/blog/categories/#Xtheory
     
     *The listing sheet, as PDF, can be found
     [here]({{{URL}}}/blob/master/CheatSheet.pdf)*, 
     while below is an unruly html rendition.
     
     ## This reference sheet is built around the system
     ## https://github.com/alhassy/CheatSheet.

     #+TOC: headlines 2
     #+INCLUDE: CheatSheet.org     
    ")
    ;; (set-visited-file-name "ReadIt2.md")
    (org-mode)
    (org-md-export-to-markdown)
)
#+END_SRC

* COMMENT footer

# Local Variables:
# eval: (org-babel-tangle)
# eval: (progn (org-babel-goto-named-src-block "make-readme") (org-babel-execute-src-block) (outline-hide-sublevels 1))
# eval: (load-file "CheatSheet.el")
# compile-command: (my-org-latex-export-to-pdf)
# End:
